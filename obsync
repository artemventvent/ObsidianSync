#!/bin/bash
VERSION="1.3.0"
CONFIG_FILE="${HOME}/.config/obsync/config"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

OBSIDIAN_DIR=""
REPO_DIR=""
REMOTE_REPO=""
BRANCH=""
EXCLUDE_PATTERNS=()

show_help() {
    echo -e "${BLUE}Obsidian Sync v${VERSION}${NC}"
    echo "Usage: obsync [OPTIONS]"
    echo
    echo "Options:"
    echo "  -u, --upload       Push changes to GitHub"
    echo "  -d, --download     Pull changes from GitHub"
    echo "  -c, --config FILE  Custom config file"
    echo "  -v, --verbose      Verbose output"
    echo "  -h, --help         Show help"
    echo "  --version          Show version"
    exit 0
}

spinner() {
    local pid=$1
    local msg=$2
    local delay=0.15
    local spin_chars=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
    local i=0
    
    if [ "$VERBOSE" = "true" ]; then
        wait "$pid"
        return $?
    fi
    
    while kill -0 "$pid" 2>/dev/null; do
        local index=$((i % ${#spin_chars[@]}))
        printf "\r%s${YELLOW} %s...${NC}" "${spin_chars[index]}" "$msg"
        i=$((i + 1))
        sleep "$delay"
    done
    printf "\r${GREEN}✓${NC} ${YELLOW}%s... Done!${NC}\n" "$msg"
    wait "$pid"
}

load_config() {
    [ -f "$CONFIG_FILE" ] || {
        echo -e "${RED}Error: Config file not found: $CONFIG_FILE${NC}" >&2
        exit 1
    }
    source "$CONFIG_FILE" || exit 1

    [ -z "$OBSIDIAN_DIR" ] && { echo -e "${RED}Error: OBSIDIAN_DIR not set${NC}"; exit 1; }
    [ -z "$REPO_DIR" ] && { echo -e "${RED}Error: REPO_DIR not set${NC}"; exit 1; }
    [ -z "$REMOTE_REPO" ] && { echo -e "${RED}Error: REMOTE_REPO not set${NC}"; exit 1; }
    [ -z "$BRANCH" ] && BRANCH="main"
}

init_repo() {
    if [ ! -d "${REPO_DIR}/.git" ]; then
        (git clone "$REMOTE_REPO" "$REPO_DIR" > /dev/null 2>&1 || {
            mkdir -p "$REPO_DIR"
            git -C "$REPO_DIR" init > /dev/null 2>&1
            git -C "$REPO_DIR" remote add origin "$REMOTE_REPO" > /dev/null 2>&1
            git -C "$REPO_DIR" branch -M "$BRANCH" > /dev/null 2>&1
            git -C "$REPO_DIR" commit --allow-empty -m "Initial commit" > /dev/null 2>&1
            git -C "$REPO_DIR" push -u origin "$BRANCH" > /dev/null 2>&1
        }) &
        spinner $! "Initializing repository"
    fi
}

sync_upload() {
    echo -e "\n${GREEN}=== UPLOAD ===${NC}"
    
    local excludes=()
    for pattern in "${EXCLUDE_PATTERNS[@]}"; do
        excludes+=("--exclude=$pattern")
    done
    
    (rsync -av --checksum --delete "${excludes[@]}" "${OBSIDIAN_DIR}/" "${REPO_DIR}/" > /dev/null 2>&1) &
    spinner $! "Syncing files"
    
    (cd "$REPO_DIR" && git add -A > /dev/null 2>&1) &
    spinner $! "Staging changes"
    
    (cd "$REPO_DIR" && git commit -m "Update: $(date +'%Y-%m-%d %H:%M:%S')" > /dev/null 2>&1) &
    spinner $! "Creating commit"
    
    (cd "$REPO_DIR" && git pull --rebase origin "$BRANCH" > /dev/null 2>&1) &
    spinner $! "Updating branch"
    
    (cd "$REPO_DIR" && git push origin "$BRANCH" > /dev/null 2>&1) &
    spinner $! "Pushing to GitHub"
}

sync_download() {
    echo -e "\n${GREEN}=== DOWNLOAD ===${NC}"
    
    (cd "$REPO_DIR" && git fetch origin > /dev/null 2>&1) &
    spinner $! "Checking updates"
    
    (cd "$REPO_DIR" && git reset --hard "origin/${BRANCH}" > /dev/null 2>&1) &
    spinner $! "Updating files"
    
    (cd "$REPO_DIR" && git clean -fd > /dev/null 2>&1) &
    spinner $! "Cleaning garbage"
    
    local excludes=()
    for pattern in "${EXCLUDE_PATTERNS[@]}"; do
        excludes+=("--exclude=$pattern")
    done
    
    (rsync -av --checksum --delete "${excludes[@]}" "${REPO_DIR}/" "${OBSIDIAN_DIR}/" > /dev/null 2>&1) &
    spinner $! "Syncing to local"
}

VERBOSE="false"
UPLOAD="false"
DOWNLOAD="false"
while [[ $# -gt 0 ]]; do
    case $1 in
        -u|--upload)
            UPLOAD="true"
            shift
            ;;
        -d|--download)
            DOWNLOAD="true"
            shift
            ;;
        -c|--config)
            CONFIG_FILE="$2"
            shift 2
            ;;
        -v|--verbose)
            VERBOSE="true"
            shift
            ;;
        -h|--help)
            show_help
            ;;
        --version)
            echo -e "${BLUE}Version: ${VERSION}${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            exit 1
            ;;
    esac
done

if [ "$UPLOAD" = "false" ] && [ "$DOWNLOAD" = "false" ]; then
    echo -e "${RED}Error: Specify at least one action (-u/--upload or -d/--download)${NC}"
    show_help
fi

load_config
init_repo

[ "$UPLOAD" = "true" ] && sync_upload
[ "$DOWNLOAD" = "true" ] && sync_download